# Project Manager Frontend Documentation

## Overview

A comprehensive project management system built with React and Vite, featuring a modern dark-themed UI with glassmorphism design. The application provides full project lifecycle management with topics, files, links, team collaboration, and activity tracking.

## Technology Stack

- **React 18** - Component-based UI library
- **Vite** - Fast build tool and dev server
- **Tailwind CSS** - Utility-first CSS framework
- **Modern JavaScript (ES6+)** - Latest language features

## Project Structure

```
frontend/src/
├── components/
│   ├── topics/              # Topic management system
│   │   ├── ProjectTopics.jsx          # Main topics container
│   │   ├── TopicPage.jsx              # Full-page topic viewer
│   │   ├── TopicCard.jsx              # Topic grid/card component
│   │   ├── TopicListItem.jsx          # Topic list view component
│   │   ├── CreateTopicModal.jsx       # Topic creation modal
│   │   ├── EditTopicModal.jsx         # Topic editing modal
│   │   ├── ViewToggle.jsx             # Grid/list view switcher
│   │   ├── UploadButton.jsx           # File upload functionality
│   │   ├── TopicNotes.jsx             # Notes management
│   │   ├── TopicLinks.jsx             # Links management
│   │   ├── TopicMedia.jsx             # Media file management
│   │   ├── TopicComments.jsx          # Comment system with threading
│   │   └── TopicTags.jsx              # Tag organization system
│   ├── files/               # File management
│   │   └── ProjectFiles.jsx           # File upload/management interface
│   ├── links/               # Link management
│   │   └── ProjectLinks.jsx           # Project links interface
│   ├── project/             # Core project components
│   │   ├── ProjectHeader.jsx          # Project navigation header
│   │   ├── ProjectOverview.jsx        # Project overview dashboard
│   │   ├── ProjectEditForm.jsx        # Project editing form
│   │   ├── ProjectActivity.jsx        # Activity feed component
│   │   ├── TeamMembers.jsx            # Team display component
│   │   └── ProjectUsersManagement.jsx # Team management modal
│   └── common/              # Shared components
├── pages/
│   ├── Dashboard.jsx        # Main dashboard/project listing
│   └── ProjectPage.jsx      # Individual project page
├── hooks/
│   └── useAuth.js           # Authentication hook
├── utils/                   # Utility functions
└── main.jsx                 # Application entry point
```

## Core Features

### 1. Project Management
- **Project Creation & Editing**: Full CRUD operations for projects
- **Project Overview**: Dashboard with key metrics and progress tracking
- **Team Management**: Add/remove team members with role-based permissions
- **Activity Tracking**: Real-time activity feed showing all project actions

### 2. Topic System
The topic system is the core knowledge management feature, allowing users to organize project information into focused areas.

#### Topic Components:
- **ProjectTopics**: Main container with grid/list view toggle
- **TopicPage**: Full-page topic interface with tabbed content
- **Topic Content Types**:
  - **Notes**: Rich text note-taking with collaborative editing
  - **Links**: Categorized external links (reference, resource, tool, inspiration)
  - **Media**: File uploads with automatic type detection (images, videos, audio, documents)
  - **Comments**: Threaded discussion system with nested replies
  - **Tags**: Color-coded organizational tags

#### Key Features:
- **Color Themes**: Each topic has a customizable color for visual organization
- **View Modes**: Switch between grid and list views with persistent state
- **File Upload**: Direct file upload to topics with auto-categorization
- **Search & Filter**: Advanced filtering and search capabilities
- **Permissions**: Role-based editing (owner/editor/viewer)

### 3. File Management
- **Multi-file Upload**: Drag-and-drop and click-to-upload interfaces
- **File Preview**: Built-in preview system for common file types
- **File Organization**: Files organized by topics or project-level uploads
- **Size & Type Detection**: Automatic file metadata extraction

### 4. Team Collaboration
- **Role-Based Permissions**:
  - **Owner**: Full project control
  - **Editor**: Can modify content and manage topics
  - **Viewer**: Read-only access
- **User Management**: Add/remove team members via email
- **Activity Tracking**: All user actions logged and displayed

### 5. State Management
- **Persistent State**: UI preferences saved across browser sessions
- **localStorage Integration**: View modes, active tabs, and navigation state persist
- **Session Management**: Cookie-based authentication with automatic session handling

## Design System

### Color Palette
```css
/* Primary Colors */
--primary-blue: #3B82F6
--primary-purple: #8B5CF6
--primary-green: #10B981

/* Background Colors */
--bg-primary: from-gray-900 via-gray-800 to-gray-900
--bg-card: rgba(55, 65, 81, 0.3)
--bg-glass: rgba(55, 65, 81, 0.5)

/* Border Colors */
--border-primary: rgba(55, 65, 81, 0.5)
--border-hover: rgba(75, 85, 99, 0.5)
```

### Design Principles
- **Glassmorphism**: Semi-transparent elements with backdrop blur
- **Gradient Accents**: Blue-to-purple gradients for primary actions
- **Dark Theme**: Consistent dark color scheme with high contrast
- **Responsive Design**: Mobile-first approach with breakpoint optimization
- **Micro-interactions**: Smooth transitions and hover effects

### Typography
- **Headers**: Bold, gradient text for primary headings
- **Body Text**: High contrast white/gray text for readability
- **Interactive Elements**: Color-coded feedback (blue for actions, green for success, red for danger)

## Component Architecture

### State Management Pattern
```javascript
// Persistent state using localStorage
const [viewMode, setViewMode] = useState(() => {
  try {
    return localStorage.getItem('viewMode') || 'grid';
  } catch {
    return 'grid';
  }
});

// Auto-save to localStorage
useEffect(() => {
  try {
    localStorage.setItem('viewMode', viewMode);
  } catch (error) {
    console.warn('Could not save view mode:', error);
  }
}, [viewMode]);
```

### API Integration Pattern
```javascript
const API_BASE = import.meta.env.VITE_API_URL || 'http://localhost:8000';

const fetchData = async () => {
  try {
    const response = await fetch(`${API_BASE}/api/endpoint/`, {
      credentials: 'include', // Cookie-based auth
      headers: { 'Content-Type': 'application/json' }
    });
    
    if (response.ok) {
      const data = await response.json();
      setData(data);
    }
  } catch (error) {
    console.error('API Error:', error);
    setError('Failed to load data');
  }
};
```

### Error Handling Pattern
```javascript
// Consistent error UI across components
if (error) {
  return (
    <div className="text-center py-12">
      <div className="w-16 h-16 bg-red-500/20 rounded-full flex items-center justify-center mx-auto mb-4">
        <ErrorIcon />
      </div>
      <h3 className="text-lg font-medium text-white mb-2">Error Title</h3>
      <p className="text-gray-400 mb-4">{error}</p>
      <button onClick={retry} className="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg">
        Try Again
      </button>
    </div>
  );
}
```

## Navigation System

### Page Structure
1. **Dashboard** - Project listing and creation
2. **ProjectPage** - Individual project management
3. **TopicPage** - Full-screen topic management
4. **Modals** - Overlay interfaces for quick actions

### Navigation Flow
```
Dashboard → ProjectPage → TopicPage
    ↓           ↓            ↑
  Projects → Topics → Topic Details
```

### State Persistence
- **Active Tab**: Remembers which project tab was last active
- **View Mode**: Persists grid/list preferences per component
- **Selected Topic**: Maintains topic selection across sessions
- **Project State**: Preserves project page state during navigation

## Key Interactions

### Topic Management Workflow
1. **Create Topic**: Modal with title, description, and color selection
2. **View Topics**: Grid/list view with search and filtering
3. **Topic Details**: Full-page interface with tabbed content sections
4. **Content Management**: Add notes, links, media, comments, and tags
5. **Collaboration**: Real-time updates and activity tracking

### File Upload Workflow
1. **Direct Upload**: Upload button creates "Uploaded Files" topic automatically
2. **Topic Upload**: Upload files directly to specific topics
3. **File Processing**: Automatic type detection and metadata extraction
4. **File Organization**: Files categorized by type and stored in topics

### Permission System
```javascript
// Permission checking pattern used throughout
const canEdit = project?.user_role === 'owner' || project?.user_role === 'editor';
const isOwner = project?.owner?.id === user?.id;

// Conditional rendering based on permissions
{canEdit && (
  <button onClick={handleEdit}>Edit</button>
)}
```

## Performance Optimizations

### Code Splitting
- Components are lazy-loaded where appropriate
- Large dependencies loaded on-demand

### State Management
- localStorage prevents unnecessary re-fetching of UI preferences
- Optimistic updates for better user experience
- Minimal re-renders through proper dependency arrays

### Asset Optimization
- SVG icons for scalability and performance
- Optimized images and media handling
- Efficient CSS with Tailwind's utility classes

## Development Guidelines

### Code Standards
- **ES6+ Features**: Use modern JavaScript syntax
- **Component Structure**: Functional components with hooks
- **Error Boundaries**: Comprehensive error handling
- **Accessibility**: ARIA labels and keyboard navigation

### Naming Conventions
- **Components**: PascalCase (e.g., `ProjectTopics.jsx`)
- **Functions**: camelCase (e.g., `handleCreateTopic`)
- **Constants**: UPPER_SNAKE_CASE (e.g., `API_BASE`)
- **CSS Classes**: Tailwind utilities with descriptive combinations

### File Organization
- **Feature-based**: Group components by feature/domain
- **Index Files**: Use index.js for clean imports
- **Shared Components**: Common components in shared directory

## API Integration

### Authentication
- **Cookie-based**: Sessions managed via HTTP cookies
- **Credentials**: All requests include `credentials: 'include'`
- **Error Handling**: Proper 401/403 error handling

### Data Fetching
- **RESTful APIs**: Standard HTTP methods (GET, POST, PATCH, DELETE)
- **Error States**: Comprehensive error handling and user feedback
- **Loading States**: Skeleton screens and loading indicators

### File Uploads
- **FormData**: Multipart form data for file uploads
- **Progress Tracking**: Upload progress indicators
- **Type Detection**: Server-side file type and metadata extraction

## Future Enhancements

### Planned Features
- **Real-time Collaboration**: WebSocket integration for live updates
- **Advanced Search**: Full-text search across all content types
- **Notifications**: In-app and email notifications for project updates
- **Mobile App**: React Native companion application
- **Offline Support**: Service worker for offline functionality

### Technical Improvements
- **TypeScript Migration**: Gradual migration to TypeScript
- **Testing Suite**: Comprehensive unit and integration tests
- **Performance Monitoring**: Real user monitoring and analytics
- **Accessibility Audit**: Full WCAG compliance

## Deployment

### Build Process
```bash
npm run build    # Production build with optimizations
npm run preview  # Preview production build locally
npm run dev      # Development server with hot reload
```

### Environment Variables
```env
VITE_API_URL=http://localhost:8000  # Backend API URL
```

### Browser Support
- Modern browsers (Chrome, Firefox, Safari, Edge)
- ES2020+ support required
- CSS Grid and Flexbox support essential

This documentation provides a comprehensive overview of the frontend architecture and serves as a foundation for future development and team collaboration.